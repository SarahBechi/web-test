{"version":3,"sources":["users.js","comments.js","posts.js","App.js","serviceWorker.js","index.js"],"names":["Users","props","state","users","fetch","then","res","json","data","setState","catch","console","log","className","this","map","user","src","style","alt","name","email","company","catchPhrase","to","Component","Comments","comments","comment","body","posts","post","title","App","exact","path","component","Posts","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yQAsCeA,E,kDAjCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MAAO,IAHI,E,gEAOE,IAAD,OAChBC,MAAM,6CACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACH,EAAKC,SAAS,CAAEN,MAAOK,OAE1BE,MAAMC,QAAQC,O,+BAInB,OAAQ,yBAAKC,UAAU,aAClBC,KAAKZ,MAAMC,MAAMY,KAAI,SAACC,GAAD,OAElB,yBAAKH,UAAU,YACX,yBAAKI,IAAI,2EAA2EC,MAAO,CAAE,MAAS,QAAS,OAAU,QAAS,cAAe,QAAUC,IAAI,SAC/J,4BAAMH,EAAKI,MACX,4BAAKJ,EAAKK,OACV,2BAAIL,EAAKM,QAAQC,aAEjB,kBAAC,IAAD,CAAMC,GAAG,UAAT,IAAmB,oD,GA3BnBC,aCgCLC,E,kDA/BX,WAAYzB,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTyB,SAAU,IAHC,E,gEAOE,IAAD,OAChBvB,MAAM,iDACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACH,EAAKC,SAAS,CAAEkB,SAAUnB,OAE7BE,MAAMC,QAAQC,O,+BAInB,OAAQ,yBAAKC,UAAU,aAClBC,KAAKZ,MAAMyB,SAASZ,KAAI,SAACa,GAAD,OAErB,yBAAKf,UAAU,kBACX,4BAAMe,EAAQR,MACd,4BAAKQ,EAAQP,OACb,2BAAIO,EAAQC,e,GAxBTJ,aCgCRK,E,kDA/BX,WAAY7B,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACT4B,MAAO,IAHI,E,gEAOE,IAAD,OAChB1B,MAAM,8CACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACH,EAAKC,SAAS,CAAEqB,MAAOtB,OAE1BE,MAAMC,QAAQC,O,+BAInB,OAAQ,yBAAKC,UAAU,aAClBC,KAAKZ,MAAM4B,MAAMf,KAAI,SAACgB,GAAD,OAElB,yBAAKlB,UAAU,eACX,4BAAMkB,EAAKC,OACX,4BAAKD,EAAKF,MACV,kBAAC,IAAD,CAAML,GAAG,aAAY,iD,GAxBrBC,a,eC0BLQ,E,4MAtBb/B,MAAQ,G,uDAKN,OACE,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOgC,OAAK,EAACC,KAAK,IAAIC,UAAWpC,IACjC,kBAAC,IAAD,CAAOmC,KAAK,YAAYC,UAAWV,IACnC,kBAAC,IAAD,CAAOS,KAAK,SAASC,UAAWC,S,GAXtBZ,aCKEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEd1C,OAAM,SAAA2C,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.5f536419.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nclass Users extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            users: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('http://jsonplaceholder.typicode.com/users')\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                this.setState({ users: data })\r\n            })\r\n            .catch(console.log)\r\n    }\r\n\r\n    render() {\r\n        return (<div className=\"container\">\r\n            {this.state.users.map((user) => (\r\n\r\n                <div className=\"userCard\">\r\n                    <img src=\"https://devshift.biz/wp-content/uploads/2017/04/profile-icon-png-898.png\" style={{ \"width\": \"150px\", \"height\": \"180px\", \"margin-left\": \"62px\" }} alt=\"icon\"></img>\r\n                    <h5 >{user.name}</h5>\r\n                    <h6>{user.email}</h6>\r\n                    <p>{user.company.catchPhrase}</p>\r\n\r\n                    <Link to=\"/posts\"> <button>Follow</button></Link>\r\n                </div>\r\n            ))}\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Users;\r\n\r\n","import React, { Component } from 'react';\r\n\r\n\r\n\r\nclass Comments extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            comments: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/comments')\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                this.setState({ comments: data })\r\n            })\r\n            .catch(console.log)\r\n    }\r\n\r\n    render() {\r\n        return (<div className=\"container\">\r\n            {this.state.comments.map((comment) => (\r\n\r\n                <div className=\"commentSection\">\r\n                    <h5 >{comment.name}</h5>\r\n                    <h5>{comment.email}</h5>\r\n                    <p>{comment.body}</p>\r\n                </div>\r\n\r\n            ))}\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Comments;\r\n\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nclass posts extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            posts: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/posts')\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                this.setState({ posts: data })\r\n            })\r\n            .catch(console.log)\r\n    }\r\n\r\n    render() {\r\n        return (<div className=\"container\">\r\n            {this.state.posts.map((post) => (\r\n\r\n                <div className=\"postSection\">\r\n                    <h5 >{post.title}</h5>\r\n                    <h5>{post.body}</h5>\r\n                    <Link to=\"/comments\"><p>Comments</p></Link>\r\n                </div>\r\n\r\n            ))}\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default posts;\r\n\r\n","import React, { Component } from 'react';\nimport Users from './users';\nimport Comments from './comments';\nimport Posts from './posts';\nimport './App.css'\nimport { Route } from \"react-router-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nclass App extends Component {\n  state = {}\n\n\n\n  render() {\n    return (\n      <Router>\n\n        <Route exact path=\"/\" component={Users} />\n        <Route path=\"/comments\" component={Comments} />\n        <Route path=\"/posts\" component={Posts} />\n\n      </Router>\n\n\n\n\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}